openapi: 3.0.0
info:
  description: |
    AirBnB adalah sebuah marketplace yang digunakan untuk memesan homestay.
  version: "1.0.0"
  title: AirBnB Restful-API
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dimasyudhana/AirBnB-RestfulAPI/1.0.0
  - description: Production
    url: https://peterzalai.biz.id
tags:
  - name: Authentication
    description: Identifikasi data pengguna
  - name: User
    description: Pengguna aplikasi yang dibangun
  - name: Homestay
    description: Product yang akan disewakan penyewa
  - name: Reservation
    description: Proses menyewa homestay
  - name: Review
    description: Review untuk homestay yang telah disewa oleh peminjam

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Endpoint create a new user to the web-application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
            example:
              username: "peterzalai"
              email: "peterzalai@gmail.com"
              password: "@Secret123"
      responses:
        '201':
          $ref: '#/components/responses/Response201'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  
  /login:
    post:
      tags:
        - Authentication
      summary: Login to system
      description: Endpoint login user to the web-application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            examples:
              example1:
                summary: Example login user id 1
                value:
                  email: "peterzalai@gmail.com"
                  password: "@Secret123"
              example2:
                summary: Example login user id 2
                value:
                  email: "peterzalai@gmail.com"
                  password: "@Secret123"
      responses:
        '200':
          $ref: '#/components/responses/Response200Login'
        '400':
          $ref: '#/components/responses/Response400Login'
        '500':
          $ref: '#/components/responses/Response500'

  '/users':
    get:
      tags:
        - User
      summary: Get user data of login user
      operationId: getSpecificUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    put:
      tags:
        - User
      summary: Update user data of login user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                user_picture:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

    delete:
      tags:
        - User
      summary: Deactivate login user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []
  
  '/users/hoster':
    post:
      tags:
        - User
      summary: Upgrade user role to hoster
      security:
        - bearerAuth : []

  '/users/reservations':
    get:
      tags:
        - User
      summary: Get all reservations of login user
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Response200UserReservation'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

  '/users/homestays':
    get:
      tags:
        - User
      summary: Get all homestays of login user
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth : []

  '/homestays':
    post:
      tags:
        - Homestay
      summary: Register a new homestay
      responses:
        '405':
          description: Invalid input
      security:
        - bearerAuth : []
    get:
      tags:
        - Homestay
      summary: Get list of all homestays with 1 picture and average rating
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - bearerAuth : []

  '/homestays/{homestay_id}':
    get:
      tags:
        - Homestay
      summary:  Get specific homestay with all pictures, reviews, and booked dates
      parameters:
        - name: homestay_id
          in: path
          description: Homestay ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/homestays'
            application/xml:
              schema:
                $ref: '#/components/schemas/homestays'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - bearerAuth : []
    put:
      tags:
        - Homestay
      summary: Update specific homestay
      parameters:
        - name: homestay_id
          in: path
          description: Homestay ID
          required: true
          schema:
            type: string
            format: uuid      
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - bearerAuth : []

    delete:
      tags:
        - Homestay
      summary: Delete specific homestay
      parameters:
        - name: homestay_id
          in: path
          description: Homestay ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - bearerAuth : []
  
  /homestays/{homestay_id}/pictures:
    post:
      tags:
        - Homestay
      summary: Add specific homestay picture
      security:
        - bearerAuth : []
  /homestays/pictures/{pictures_id}:
    put:
      tags:
        - Homestay
      summary: Edit specific picture of specific homestay
      security:
        - bearerAuth : []
    delete:
      tags:
        - Homestay
      summary: Delete specific picture of specific homestay
      security:
        - bearerAuth : []

  /reservations:
    post:
      tags:
        - Reservation
      summary: Create homestay reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reservations"
            example:
              homestay_id: "string-uuid"
              check-in_date: "2023/06/05 08:05"
              check-out_date: "2023/08/05 08:05"
      responses:
        '201':
          $ref: '#/components/responses/Response201MakeReservation'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

  '/reservations/{reservation_id}':
    get:
      tags:
        - Reservation
      summary: Get specific reservation with payment data
      security:
        - bearerAuth : []
    put:
      tags:
        - Reservation
      summary: Update specific reservation
      description: Endpoint edit reservation
      parameters:
      - name: reservation_id
        in: path
        description: Reservation ID
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reservations"
            example:
              check-in_date: "2023/06/05 08:05"
              check-out_date: "2023/08/05 08:05"
      responses:
        '201':
          $ref: '#/components/responses/Response201'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

    delete:
      tags:
        - Reservation
      summary: Cancel specific reservation
      description: Returns a single pet
      parameters:
        - name: reservation_id
          in: path
          description: Reservation ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []
  '/reservations/{reservation_id}/payment':
    post:
      tags:
        - Reservation
      summary: Create payment for specific reservation
      security:
        - bearerAuth : []
    put: 
      tags:
        - Reservation
      summary: Update payment of specific reservation  
      security:
        - bearerAuth : []

  /reviews:
    post:
      tags:
        - Review
      summary: Register reviews for homestays
      description: Endpoint register reviews for homestays to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: "nice trip"
                rating:
                  type: integer
                  example: "5"
                homestay_id:
                  type: string
                  example: "string uuid homestay_id"
      responses:
        '201':
          $ref: '#/components/responses/Response201RegisterReview'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

  '/reviews/{review_id}':
    get:
      tags:
        - Review
      summary: Find specific reservation
      description: Returns a single pet
      parameters:
        - name: review_id
          in: path
          description: Review ID
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          $ref: '#/components/responses/Response200Review'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

    put:
      tags:
        - Review
      summary: Edit an existing review
      parameters:
        - name: review_id
          in: path
          description: Review ID
          required: true
          schema:
            type: integer
            format: uint64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: "nice homestay for nomad like me"
                rating:
                  type: integer
                  example: "5"
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

    delete:
      tags:
        - Review
      summary: Unregister specific review
      description: Unregister specific review by review_id
      parameters:
        - name: review_id
          in: path
          description: Review ID
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        '200':
          $ref: '#/components/responses/Response200'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  requestBodies:
    RequestLoginUser:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/users' 

  responses:
    Response200:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Successful operation"
    
    Response201:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 201
              message:
                type: string
                example: "Successful operation"

    Response400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad request"
    
    Response401:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: "Unauthorized access."

    Response404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              message:
                type: string
                example: "The requested resource was not found"

    Response500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal server error"

    Response200Login:
      description: Successful login
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 200
              message: "Successful login"
              data:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBldGVyemFsYWlAZ21haWwuY29tIiwicGFzc3dvcmQiOiJAU2VjcmV0MTIzIn0.BZq48TAx5wci2LH48KW5geslrGR2ybr0-5Wol-HyDkI"
   
    Response200Reservation:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 200
              message: "Successful operation"
              data:
                  user_booking: "Tono Haha"
                  user_hosting: "Tini Hihi"
                  category: "Villa Premium A3"
                  price: 100
                  quantity: 2
                  gross_amount: 200
                  check-in_date: "2023/06/05 08:05"
                  check-out_date: "2023/08/05 08:05"

    Response200UserReservation:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Successful operation"
              data:
                type: array
                items:
                  type: object
            example:
              code: 200
              message: "Successful operation"
              data:
                - user_hosting: "Tini Hihi"
                  category: "Villa Premium A3"
                  price: 100
                  quantity: 2
                  gross_amount: 200
                  check-in_date: "2023/06/05 08:05"
                  check-out_date: "2023/08/05 08:05"
                  payment_status: "settlement"
                - user_hosting: "Sahabad Saha"
                  category: "Villa Deluxe B2"
                  price: 150
                  quantity: 1
                  gross_amount: 150
                  check-in_date: "2023/07/10 14:30"
                  check-out_date: "2023/07/15 11:00"
                  payment_status: "pending"

    Response200GetPayment:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 200
              message: "Successful operation"
              data:
                reservation_id: "string-uuid"
                user_booking: "Tono Haha"
                user_hosting: "Tini Hihi"
                category: "Villa Premium A3"
                price: 100
                quantity: 2
                gross_amount: 200
                check-in_date: "2023/06/05 08:05"
                check-out_date: "2023/08/05 08:05"
                payment_type: "bank_transfer"
                payment_time: "2019-10-23 16:33:49"
                payment_status: "pending"
                bank_transfer: "bca"
                va_number: "812785002530231"                  

    Response200Review:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful add feedback"
              data:
                review_id: 1
                username: "Petrik"
                user_picture: "https://images.app.goo.gl/t5b981L6oUTU3fE18"
                review: "Ini bagian review untuk homestay yang bersangkutan"
                rating: 5

    Response201MakeReservation:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 200
              message: "Successful operation"
              data:
                  reservation_id: "string-uuid"
                  category: "Villa Premium A3"
                  price: 100
                  quantity: 2
                  gross_amount: 200
                  check-in_date: "2023/06/05 08:05"
                  check-out_date: "2023/08/05 08:05"

    Response201SubmitPayment:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              token:
                type: string
            example: 
              code: 201
              message: "Success, Bank Transfer transaction is created"
              data:
                payment_id: "string-midtrans"
                va_number: "812785002530231"

    Response201RegisterReview:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
            example: 
              code: 200
              message: "Successful add feedback"
              data:
                review_id: 1
                username: "Petrik"
                review: "Ini bagian review untuk homestay yang bersangkutan"
                rating: 5

    Response400Login:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad request, Incorrect email or password"

  schemas:
    users:
      type: object 
      properties: 
        user_id: 
          type: string
          format: uuid 
        username: 
          type: string  
        email: 
          type: string
          format: email
        password: 
          type: string
        user_picture: 
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    homestays:
      type: object
      required:
        - title
        - homestay_picture_id
      properties:
        homestay_id:
          type: string
          format: uuid 
        title:
          type: string
        description:
          type: string
        homestay_picture_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    homestay_pictures:
      type: object
      required:
        - homestay_picture
      properties:
        homestay_picture_id:
          type: integer
        homestay_picture_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    reservations:
      type: object
      properties:
        reservation_id:
          type: string
          format: uuid 
        category:
          type: string
        price:
          type: integer
          format: uint64
        quantity:
          type: integer
          format: uint64
        check-in_date:
          type: string
          format: date-time
        check-out_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    payments:
      type: object
      required:
        - booking_id
        - gross_amount
        - payment_type
        - bank_transfer
      properties:
        transaction_id:
          type: string
          format: uuid
        booking_id:
          type: string
        gross_amount:
          type: string
        payment_type:
          type: string
        bank_transfer:
          type: string
          enum:
          - bca
          - bni
          - bri
          - mandiri
        payment_time:
          type: string
        payment_status:
          type: string
        VA_Numbers:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    reviews:
      type: object
      required:
        - user_id
        - rating
      properties:
        review_id:
          type: integer
          format: uint64
        user_id:
          type: string
          format: uuid
        review:
          type: string
        rating:
          type: integer
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string